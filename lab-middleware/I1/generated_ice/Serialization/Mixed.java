//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.9
//
// <auto-generated>
//
// Generated from file `serialization.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Serialization;

public class Mixed implements java.lang.Cloneable,
                              java.io.Serializable
{
    public byte b;

    public short s;

    public int i;

    public float f;

    public double d;

    public String ss;

    public Mixed()
    {
        this.ss = "";
    }

    public Mixed(byte b, short s, int i, float f, double d, String ss)
    {
        this.b = b;
        this.s = s;
        this.i = i;
        this.f = f;
        this.d = d;
        this.ss = ss;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        Mixed r = null;
        if(rhs instanceof Mixed)
        {
            r = (Mixed)rhs;
        }

        if(r != null)
        {
            if(this.b != r.b)
            {
                return false;
            }
            if(this.s != r.s)
            {
                return false;
            }
            if(this.i != r.i)
            {
                return false;
            }
            if(this.f != r.f)
            {
                return false;
            }
            if(this.d != r.d)
            {
                return false;
            }
            if(this.ss != r.ss)
            {
                if(this.ss == null || r.ss == null || !this.ss.equals(r.ss))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::Serialization::Mixed");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, b);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, s);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, i);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, f);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, d);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, ss);
        return h_;
    }

    public Mixed clone()
    {
        Mixed c = null;
        try
        {
            c = (Mixed)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeByte(this.b);
        ostr.writeShort(this.s);
        ostr.writeInt(this.i);
        ostr.writeFloat(this.f);
        ostr.writeDouble(this.d);
        ostr.writeString(this.ss);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.b = istr.readByte();
        this.s = istr.readShort();
        this.i = istr.readInt();
        this.f = istr.readFloat();
        this.d = istr.readDouble();
        this.ss = istr.readString();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, Mixed v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public Mixed ice_read(com.zeroc.Ice.InputStream istr)
    {
        Mixed v = new Mixed();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<Mixed> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, Mixed v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<Mixed> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(Mixed.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final Mixed _nullMarshalValue = new Mixed();

    /** @hidden */
    public static final long serialVersionUID = 372532994L;
}
