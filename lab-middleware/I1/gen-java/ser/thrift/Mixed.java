/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ser.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.18.1)", date = "2023-05-03")
public class Mixed implements org.apache.thrift.TBase<Mixed, Mixed._Fields>, java.io.Serializable, Cloneable, Comparable<Mixed> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Mixed");

  private static final org.apache.thrift.protocol.TField B_FIELD_DESC = new org.apache.thrift.protocol.TField("b", org.apache.thrift.protocol.TType.BYTE, (short)1);
  private static final org.apache.thrift.protocol.TField S_FIELD_DESC = new org.apache.thrift.protocol.TField("s", org.apache.thrift.protocol.TType.I16, (short)2);
  private static final org.apache.thrift.protocol.TField I_FIELD_DESC = new org.apache.thrift.protocol.TField("i", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField F_FIELD_DESC = new org.apache.thrift.protocol.TField("f", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField D_FIELD_DESC = new org.apache.thrift.protocol.TField("d", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField SS_FIELD_DESC = new org.apache.thrift.protocol.TField("ss", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MixedStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MixedTupleSchemeFactory();

  public byte b; // required
  public short s; // required
  public int i; // required
  public int f; // required
  public double d; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String ss; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    B((short)1, "b"),
    S((short)2, "s"),
    I((short)3, "i"),
    F((short)4, "f"),
    D((short)5, "d"),
    SS((short)6, "ss");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // B
          return B;
        case 2: // S
          return S;
        case 3: // I
          return I;
        case 4: // F
          return F;
        case 5: // D
          return D;
        case 6: // SS
          return SS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __B_ISSET_ID = 0;
  private static final int __S_ISSET_ID = 1;
  private static final int __I_ISSET_ID = 2;
  private static final int __F_ISSET_ID = 3;
  private static final int __D_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.B, new org.apache.thrift.meta_data.FieldMetaData("b", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.S, new org.apache.thrift.meta_data.FieldMetaData("s", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.I, new org.apache.thrift.meta_data.FieldMetaData("i", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.F, new org.apache.thrift.meta_data.FieldMetaData("f", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.D, new org.apache.thrift.meta_data.FieldMetaData("d", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SS, new org.apache.thrift.meta_data.FieldMetaData("ss", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Mixed.class, metaDataMap);
  }

  public Mixed() {
  }

  public Mixed(
    byte b,
    short s,
    int i,
    int f,
    double d,
    java.lang.String ss)
  {
    this();
    this.b = b;
    setBIsSet(true);
    this.s = s;
    setSIsSet(true);
    this.i = i;
    setIIsSet(true);
    this.f = f;
    setFIsSet(true);
    this.d = d;
    setDIsSet(true);
    this.ss = ss;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Mixed(Mixed other) {
    __isset_bitfield = other.__isset_bitfield;
    this.b = other.b;
    this.s = other.s;
    this.i = other.i;
    this.f = other.f;
    this.d = other.d;
    if (other.isSetSs()) {
      this.ss = other.ss;
    }
  }

  @Override
  public Mixed deepCopy() {
    return new Mixed(this);
  }

  @Override
  public void clear() {
    setBIsSet(false);
    this.b = 0;
    setSIsSet(false);
    this.s = 0;
    setIIsSet(false);
    this.i = 0;
    setFIsSet(false);
    this.f = 0;
    setDIsSet(false);
    this.d = 0.0;
    this.ss = null;
  }

  public byte getB() {
    return this.b;
  }

  public Mixed setB(byte b) {
    this.b = b;
    setBIsSet(true);
    return this;
  }

  public void unsetB() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __B_ISSET_ID);
  }

  /** Returns true if field b is set (has been assigned a value) and false otherwise */
  public boolean isSetB() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __B_ISSET_ID);
  }

  public void setBIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __B_ISSET_ID, value);
  }

  public short getS() {
    return this.s;
  }

  public Mixed setS(short s) {
    this.s = s;
    setSIsSet(true);
    return this;
  }

  public void unsetS() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __S_ISSET_ID);
  }

  /** Returns true if field s is set (has been assigned a value) and false otherwise */
  public boolean isSetS() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __S_ISSET_ID);
  }

  public void setSIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __S_ISSET_ID, value);
  }

  public int getI() {
    return this.i;
  }

  public Mixed setI(int i) {
    this.i = i;
    setIIsSet(true);
    return this;
  }

  public void unsetI() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __I_ISSET_ID);
  }

  /** Returns true if field i is set (has been assigned a value) and false otherwise */
  public boolean isSetI() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __I_ISSET_ID);
  }

  public void setIIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __I_ISSET_ID, value);
  }

  public int getF() {
    return this.f;
  }

  public Mixed setF(int f) {
    this.f = f;
    setFIsSet(true);
    return this;
  }

  public void unsetF() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __F_ISSET_ID);
  }

  /** Returns true if field f is set (has been assigned a value) and false otherwise */
  public boolean isSetF() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __F_ISSET_ID);
  }

  public void setFIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __F_ISSET_ID, value);
  }

  public double getD() {
    return this.d;
  }

  public Mixed setD(double d) {
    this.d = d;
    setDIsSet(true);
    return this;
  }

  public void unsetD() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __D_ISSET_ID);
  }

  /** Returns true if field d is set (has been assigned a value) and false otherwise */
  public boolean isSetD() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __D_ISSET_ID);
  }

  public void setDIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __D_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSs() {
    return this.ss;
  }

  public Mixed setSs(@org.apache.thrift.annotation.Nullable java.lang.String ss) {
    this.ss = ss;
    return this;
  }

  public void unsetSs() {
    this.ss = null;
  }

  /** Returns true if field ss is set (has been assigned a value) and false otherwise */
  public boolean isSetSs() {
    return this.ss != null;
  }

  public void setSsIsSet(boolean value) {
    if (!value) {
      this.ss = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case B:
      if (value == null) {
        unsetB();
      } else {
        setB((java.lang.Byte)value);
      }
      break;

    case S:
      if (value == null) {
        unsetS();
      } else {
        setS((java.lang.Short)value);
      }
      break;

    case I:
      if (value == null) {
        unsetI();
      } else {
        setI((java.lang.Integer)value);
      }
      break;

    case F:
      if (value == null) {
        unsetF();
      } else {
        setF((java.lang.Integer)value);
      }
      break;

    case D:
      if (value == null) {
        unsetD();
      } else {
        setD((java.lang.Double)value);
      }
      break;

    case SS:
      if (value == null) {
        unsetSs();
      } else {
        setSs((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case B:
      return getB();

    case S:
      return getS();

    case I:
      return getI();

    case F:
      return getF();

    case D:
      return getD();

    case SS:
      return getSs();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case B:
      return isSetB();
    case S:
      return isSetS();
    case I:
      return isSetI();
    case F:
      return isSetF();
    case D:
      return isSetD();
    case SS:
      return isSetSs();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof Mixed)
      return this.equals((Mixed)that);
    return false;
  }

  public boolean equals(Mixed that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_b = true;
    boolean that_present_b = true;
    if (this_present_b || that_present_b) {
      if (!(this_present_b && that_present_b))
        return false;
      if (this.b != that.b)
        return false;
    }

    boolean this_present_s = true;
    boolean that_present_s = true;
    if (this_present_s || that_present_s) {
      if (!(this_present_s && that_present_s))
        return false;
      if (this.s != that.s)
        return false;
    }

    boolean this_present_i = true;
    boolean that_present_i = true;
    if (this_present_i || that_present_i) {
      if (!(this_present_i && that_present_i))
        return false;
      if (this.i != that.i)
        return false;
    }

    boolean this_present_f = true;
    boolean that_present_f = true;
    if (this_present_f || that_present_f) {
      if (!(this_present_f && that_present_f))
        return false;
      if (this.f != that.f)
        return false;
    }

    boolean this_present_d = true;
    boolean that_present_d = true;
    if (this_present_d || that_present_d) {
      if (!(this_present_d && that_present_d))
        return false;
      if (this.d != that.d)
        return false;
    }

    boolean this_present_ss = true && this.isSetSs();
    boolean that_present_ss = true && that.isSetSs();
    if (this_present_ss || that_present_ss) {
      if (!(this_present_ss && that_present_ss))
        return false;
      if (!this.ss.equals(that.ss))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + (int) (b);

    hashCode = hashCode * 8191 + s;

    hashCode = hashCode * 8191 + i;

    hashCode = hashCode * 8191 + f;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(d);

    hashCode = hashCode * 8191 + ((isSetSs()) ? 131071 : 524287);
    if (isSetSs())
      hashCode = hashCode * 8191 + ss.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Mixed other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetB(), other.isSetB());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetB()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.b, other.b);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetS(), other.isSetS());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetS()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.s, other.s);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetI(), other.isSetI());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i, other.i);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetF(), other.isSetF());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetF()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.f, other.f);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetD(), other.isSetD());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetD()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.d, other.d);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSs(), other.isSetSs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ss, other.ss);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Mixed(");
    boolean first = true;

    sb.append("b:");
    sb.append(this.b);
    first = false;
    if (!first) sb.append(", ");
    sb.append("s:");
    sb.append(this.s);
    first = false;
    if (!first) sb.append(", ");
    sb.append("i:");
    sb.append(this.i);
    first = false;
    if (!first) sb.append(", ");
    sb.append("f:");
    sb.append(this.f);
    first = false;
    if (!first) sb.append(", ");
    sb.append("d:");
    sb.append(this.d);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ss:");
    if (this.ss == null) {
      sb.append("null");
    } else {
      sb.append(this.ss);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MixedStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public MixedStandardScheme getScheme() {
      return new MixedStandardScheme();
    }
  }

  private static class MixedStandardScheme extends org.apache.thrift.scheme.StandardScheme<Mixed> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, Mixed struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // B
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.b = iprot.readByte();
              struct.setBIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // S
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.s = iprot.readI16();
              struct.setSIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // I
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.i = iprot.readI32();
              struct.setIIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // F
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.f = iprot.readI32();
              struct.setFIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // D
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.d = iprot.readDouble();
              struct.setDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ss = iprot.readString();
              struct.setSsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, Mixed struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(B_FIELD_DESC);
      oprot.writeByte(struct.b);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(S_FIELD_DESC);
      oprot.writeI16(struct.s);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(I_FIELD_DESC);
      oprot.writeI32(struct.i);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(F_FIELD_DESC);
      oprot.writeI32(struct.f);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(D_FIELD_DESC);
      oprot.writeDouble(struct.d);
      oprot.writeFieldEnd();
      if (struct.ss != null) {
        oprot.writeFieldBegin(SS_FIELD_DESC);
        oprot.writeString(struct.ss);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MixedTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public MixedTupleScheme getScheme() {
      return new MixedTupleScheme();
    }
  }

  private static class MixedTupleScheme extends org.apache.thrift.scheme.TupleScheme<Mixed> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Mixed struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetB()) {
        optionals.set(0);
      }
      if (struct.isSetS()) {
        optionals.set(1);
      }
      if (struct.isSetI()) {
        optionals.set(2);
      }
      if (struct.isSetF()) {
        optionals.set(3);
      }
      if (struct.isSetD()) {
        optionals.set(4);
      }
      if (struct.isSetSs()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetB()) {
        oprot.writeByte(struct.b);
      }
      if (struct.isSetS()) {
        oprot.writeI16(struct.s);
      }
      if (struct.isSetI()) {
        oprot.writeI32(struct.i);
      }
      if (struct.isSetF()) {
        oprot.writeI32(struct.f);
      }
      if (struct.isSetD()) {
        oprot.writeDouble(struct.d);
      }
      if (struct.isSetSs()) {
        oprot.writeString(struct.ss);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Mixed struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.b = iprot.readByte();
        struct.setBIsSet(true);
      }
      if (incoming.get(1)) {
        struct.s = iprot.readI16();
        struct.setSIsSet(true);
      }
      if (incoming.get(2)) {
        struct.i = iprot.readI32();
        struct.setIIsSet(true);
      }
      if (incoming.get(3)) {
        struct.f = iprot.readI32();
        struct.setFIsSet(true);
      }
      if (incoming.get(4)) {
        struct.d = iprot.readDouble();
        struct.setDIsSet(true);
      }
      if (incoming.get(5)) {
        struct.ss = iprot.readString();
        struct.setSsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

